// M16_14matrix_instruction_3.0 by
//...................................................................-*-....................................................................
//.............................................................-*+=====-....................................................................
//.................................................:*++......:=========....+======+..:=================+....................................
//............................................:=======+.....:=========+...-=======:.:=======+::----:*==*....................................
//...........................................*========*....*==========*...*======+..+======-................................................
//..........................................+=========*...+===++======:..-=======:.-==================:.....................................
//........................................-===++======:..+===::=======-..*=======..*==================:.....................................
//.......................................:===:.=======:-===+..+=======...=======*.-=======......======......................................
//......................................*===-.-=======*===*..:=======+..:=======-.*======+....-+=====*......................................
//.....................................+==*...:==========-...+=======*..+======+..*=================+.......................................
//...................................-===:....:********:....:*********----------....---------------.........................................
//..................................:==+....................................................................................................
//................................-+==+.....................................................................................................

// VK: https://vk.com/m16ind
// Twitter: https://twitter.com/M16Studios
// Thingiverse: https://www.thingiverse.com/m16_studios/designs

// Featuring //DaniilAndTea https://vk.com/club171233800

// Astonishment - a long-lasting effect when a touch button is signaled, then bish touching the nose.
// Anger is a long-lasting effect with four (can be changed) boops with less than two second pauses between them.
// Death is a long-lasting effect with seven (can be changed) boops with less than two second pauses between them.
// Blink is a short effect every few seconds.
// The opening of the mouth depends on the signal from the microphone. 

// All sprites for drawing the muzzle are stored only for one half of the muzzle, for the second part of the muzzle 
// the sprites are drawn in a mirror image. Winking is implemented by alternately turning off and turning on the 
// lines of the straight eye - from the top and bottom to the center, turning the lines back on also happens smoothly,
// not instantly, I was confused to make it beautiful. 

#include <Adafruit_GFX.h> 
#include <Max72xxPanel.h> //need to install, library file attached 

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SETUP~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~╗
//                                                                                                                        ║
//                                                         Sprites                                                        ║
#define mod_jaws 3 // Jaws: 3 - beautiful; 2 - standart; 1 - thin; 0 - type1;                                             ║4  options ╗
#define mod_eye  0 // Eyes:  0-mk3; 1-ellipse; 2-classic; 3-triangular; 5-strange; 4-semicircular;                        ║12 options ║
                   //        5-strange; 6-squinted; 7-mk5; 8-unusual; 9-corner; 10-alt-squinted; 11-stripes;              ║           ║
#define mod_nose 4 // Nostrils: 7-corner; 6-stripes; 5-round; 4-mk5-xl; 3-mk5; 2-mk3; 1-dots; 0-mini;                     ║8  options ║
#define mod_owo  2 // Astonishment: 4-corner; 3-round1; 2-round2; 1-squinted; 0-animated heart                            ║5  options ║
#define mod_zloy 3 // Angery eyes: 3-angry; 2-double eye; 1-round1; 0-round2;                                             ║4  options ╠═ total over 2.45 million combinations :p
#define mod_kill 4 // Death eyes: 4-wide X; 3-squinted; 2-stripe; 1-X; 0-alt-squinted                                     ║5  options ║
#define alt_owo  3 // Astonishment mouth: 3 - saw; 2 - stripe; 1 - oWo; 0 - the mouth does not change                     ║4  options ║
#define alt_ang  1 // Anger mouth: 3 - grin3; 2 - grin2; 1 - grin ; 0 - the mouth does not change                         ║4  options ║
#define alt_kill 1 // Death mouth: 3 - stripe with tongue; 2 - stripe; 1 - classic; 0 - the mouth does not change         ║4  options ╝
//                                                                                                                        ║
//                                                         Timings                                                        ║
int owo_tm = 6000; // Astonishment duration in milliseconds                                                               ║
int zloy_tm = 8000;// Anger duration in milliseconds                                                                      ║
int tm_dt = 12000; // Duration of death in milliseconds                                                                   ║
int hrt_spd = 800; // Heart animation speed, the smaller the number, the faster the animation.                            ║
int cnt_zl = 4;    // Number of sensor touches for angry mode                                                             ║
int cnt_kl = 10;   // Number of sensor touches for death mode                                                             ║
int t = 15;        // Wink animation speed, the lower the number, the faster the animation.                               ║
//                                                                                                                        ║
//                                                       Connection                                                       ║
int boop = 2;      // The digital pin to which the touch button is connected.                                             ║
int mic = 7;       // The analog pin to which the microphone is connected.                                                ║
int brt = 10;      // Brightness max7219 from 1 to 15 (When not working at full power, some matrices may squeak.          ║
//                                                                                                                        ║
//                                                     Matrix connection                                                  ║
//                                                       VCC  ↔  Vin                                                     ║
//                                ~~~~~~~~~~             GND  ↔  GND             ~~~~~~~~~~~                             ║
//                                I Matrix I        DIN(SDI)  ↔  D11             I Arduino I                             ║
//                                ~~~~~~~~~~              CS  ↔  D9              ~~~~~~~~~~~                             ║
//                                                  CLK(SCL)  ↔  D13               (NANO)                                ║
//                                                                                                                        ║
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SETUP~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~╝

Max72xxPanel matrix = Max72xxPanel(9, 1, 14); //matrix connection, only I allowed to touch 

//many variables 
bool blink, smile, zloy, nos, gen3I=0, gen3O=0, tim3I=0, gen4I=0, gen4O=0, gen2I=0, tim5I=0, gen2O=0, gen7I=0, gen7O=0, count3I = 0;
bool count3_SCST = 0, tim2I = 0, tim2O = 0, tim4I = 0, tim4O = 0, trgrt3 = 0, trgrt3I = 0, count1I = 0, trgrt8 = 0, trgrt8I = 0, gen5I = 0, gen5O = 0; 
bool gen1I = 0, count4I = 0, count4MaxLO = 0, trgrt1 = 0, count1MaxLO = 0, trgrt1I = 0, trgrt5 = 0, trgrt5I = 0, tim7I = 0,  trgrt4 = 0;
bool tim7O = 0, trgrt4I = 0, tim1I = 0, tim1O = 0, trgrt2 = 0, trgrt2I = 0, temp, zamer;
unsigned long gen3P = 0UL, tim3P = 0UL, gen4P = 0UL, gen2P = 0UL, tim5P = 0UL, gen7P = 0UL, tim2P = 0UL, tim4P = 0UL, gen5P = 0UL, gen1P = 0UL, tim7P = 0UL, tim1P = 0UL;
int array[100];
int kill, x = 0, y = 0, _PWDC = 0, gtv1 = 1000, count4_Value = 0, count3_Value = 0, count1_Value = 0, index=0, output, input, maxsnach = 1000, maxsnach2 = 1000, m1, sprite_smile, rot;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Nostrils spites 

#if (mod_nose == 7)
const byte  nose[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b10000001,
    0b11000011,
    0b01100110,
    0b00111100,
    0b00011000,
    
    0b00011000,
    0b00111100,
    0b01100110,
    0b11000011,
    0b10000001,
    0b00000000,
    0b00000000,
    0b00000000,
};

#elif (mod_nose == 6)
const byte  nose[16] = {
    0b00000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b00000000,
};

#elif (mod_nose == 5)
const byte  nose[16] = {
    0b00100000,
    0b01110000,
    0b11111000,
    0b11111100,
    0b11111100,
    0b01111100,
    0b00111000,
    0b00010000,
    
    0b00010000,
    0b00111000,
    0b01111100,
    0b11111100,
    0b11111100,
    0b11111000,
    0b01110000,
    0b00100000,
};
#elif (mod_nose == 4)
const byte  nose[16] = {
    0b10000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b01111100,
    0b00111110,
    
    0b00111110,
    0b01111100,
    0b11110000,
    0b11100000,
    0b11100000,
    0b11100000,
    0b11000000,
    0b10000000,
};
#elif (mod_nose == 3)
const byte  nose[16] = {
    0b00000000,
    0b10000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11110000,
    0b01111000,
    
    0b01111100,
    0b11111000,
    0b11100000,
    0b11100000,
    0b11100000,
    0b11000000,
    0b10000000,
    0b00000000,
};
#elif (mod_nose == 2)
const byte  nose[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b10000000,
    0b11000000,
    0b01110000,
    
    0b01110000,
    0b11100000,
    0b10000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#elif (mod_nose == 1)
const byte  nose[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b11000000,
    
    0b10000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#elif (mod_nose == 0)
const byte  nose[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b10000000,
    0b01000000,
    
    0b01000000,
    0b10000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Eyes spites 

#if (mod_eye == 11)
const byte  eyes[16] = {
    0b00000001,
    0b00000011,
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111000,
    0b01110001,
    0b11100011,
    0b11000111,
    0b10001110,
    0b00011100,
    0b00111000,
    0b01110000,
    0b11100000,
    0b11000000,
    0b10000000,
};
#elif (mod_eye == 10)
const byte  eyes[16] = {
    0b00100000,
    0b00010000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00000110,
    0b00000010,
    0b00000011,
    0b00000011,
    0b00000111,
    0b00001110,
    0b00001110,
    0b00011100,
    0b00111000,
    0b11110000,
    0b11000000,
};
#elif (mod_eye == 9)
const byte  eyes[16] = {
    0b00000001,
    0b00000011,
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111000,
    0b01110000,
    0b11100000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00000011,
    0b00000001,
};
#elif (mod_eye == 8)
const byte  eyes[16] = {
    0b00110000,
    0b00011000,
    0b00111000,
    0b01111100,
    0b01111110,
    0b01111110,
    0b11111110,
    0b11111110,
    0b11111110,
    0b11111110,
    0b11111100,
    0b11111000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b10000000,
};
#elif (mod_eye == 7)
const byte  eyes[16] = {
    0b01000000,
    0b11100000,
    0b11110000,
    0b11111000,
    0b11111100,
    0b11111110,
    0b11111110,
    0b11111111,
    0b11111111,
    0b11111111,
    0b11111110,
    0b11111110,
    0b11111100,
    0b11111100,
    0b11111000,
    0b01110000,
};
#elif (mod_eye == 6)
const byte  eyes[16] = {
    0b00000010,
    0b00001111,
    0b00011111,
    0b00111110,
    0b00111100,
    0b01111100,
    0b01111000,
    0b11111000,
    0b11111000,
    0b11111000,
    0b11111100,
    0b11111110,
    0b01111111,
    0b00111111,
    0b00011111,
    0b00001110,
};
#elif (mod_eye == 5)
const byte  eyes[16] = {
    0b00011000,
    0b00011000,
    0b00111100,
    0b00111100,
    0b01111110,
    0b01111110,
    0b11111111,
    0b11111111,
    0b11111111,
    0b11111111,
    0b00111100,
    0b10000001,
    0b11111111,
    0b11111111,
    0b01111110,
    0b00111100,
}; 
#elif (mod_eye == 4)
const byte  eyes[16] = {
    0b00000011,
    0b00001111,
    0b00011111,
    0b00111111,
    0b00111111,
    0b01111111,
    0b01111111,
    0b11111111,
    0b11111111,
    0b01111111,
    0b01111111,
    0b00111111,
    0b00111111,
    0b00011111,
    0b00001111,
    0b00000011,
};
#elif (mod_eye == 3)
const byte  eyes[16] = {
    0b11000000,
    0b11100000,
    0b11111000,
    0b11111100,
    0b11111111,
    0b11111111,
    0b11111110,
    0b11111100,
    0b11111100,
    0b11111000,
    0b11110000,
    0b11110000,
    0b11100000,
    0b11000000,
    0b11000000,
    0b10000000,
};
#elif (mod_eye == 2)
const byte  eyes[16] = {
    0b11100000,
    0b11111000,
    0b11111100,
    0b11111110,
    0b11111110,
    0b11111111,
    0b11111111,
    0b11111111,
    0b11111111,
    0b11111110,
    0b11111110,
    0b11111100,
    0b11111000,
    0b11110000,
    0b11100000,
    0b11000000,
};
#elif (mod_eye == 1)
const byte  eyes[16] = {
    0b00000110,
    0b00001111,
    0b00001111,
    0b00011111,
    0b00011111,
    0b00111111,
    0b00111110,
    0b01111110,
    0b01111110,
    0b01111110,
    0b11111100,
    0b11111100,
    0b11111100,
    0b11111000,
    0b11111000,
    0b01110000,
};
#else
const byte  eyes[16] = {
    0b00000111,
    0b00100110,
    0b00101110,
    0b01001100,
    0b01011100,
    0b10011100,
    0b10111000,
    0b00111000,
    0b01111000,
    0b01111000,
    0b11111000,
    0b11111100,
    0b11111100,
    0b01111100,
    0b00111100,
    0b00011000,  
};
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Angry eyes sprites

#if (mod_zloy == 3)
const byte  ang_eyes[16] = {
    0b00100000,
    0b00100011,
    0b01000111,
    0b01000111,
    0b10000111,
    0b10001111,
    0b00001111,
    0b00011111,
    0b00011110,
    0b00111110,
    0b01111100,
    0b11111100,
    0b11111000,
    0b01110000,
    0b00000000,
    0b00000000,
};
#elif (mod_zloy == 2)
const byte  ang_eyes[16] = {
    0b00110000,
    0b01111010,
    0b01111011,
    0b01111011,
    0b11111011,
    0b11111011,
    0b11111011,
    0b11111001,
    0b11111000,
    0b11111000,
    0b11111000,
    0b11110000,
    0b11110000,
    0b01100000,
    0b00000000,
    0b00000000,
};
#elif (mod_zloy == 1)
const byte  ang_eyes[16] = {
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00111100,
    0b00100010,
    0b00100001,
    0b00100001,
    0b01000001,
    0b01000001,
    0b01000010,
    0b01111100,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
};
#elif (mod_zloy == 0)
const byte  ang_eyes[16] = {
    0b00010000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00111100,
    0b00111110,
    0b00111111,
    0b00111111,
    0b01111111,
    0b01111111,
    0b01111110,
    0b01111100,
    0b10000000,
    0b10000000,
    0b10000000,
    0b10000000,
};
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Astonishment eyes sprites

#if (mod_owo == 4)
const byte  owo_eyes[16] = {
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00111100,
    0b00100100,
    0b00100100,
    0b01100110,
    0b01100110,
    0b01000010,
    0b11000011,
    0b11000011,
    0b10000001,
    0b10000001,
    0b10000001,
    0b10000001,
};
#elif (mod_owo == 3)
const byte  owo_eyes[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00111100,
    0b01000010,
    0b10000001,
    0b10000001,
    0b10000001,
    0b10000001,
    0b01000010,
    0b00111100,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#elif (mod_owo == 2)
const byte  owo_eyes[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00111100,
    0b01111110,
    0b11111111,
    0b11111111,
    0b11111111,
    0b11111111,
    0b01111110,
    0b00111100,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#elif (mod_owo == 1)
const byte  owo_eyes[16] = {
    0b00000010,
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111100,
    0b00111000,
    0b01111000,
    0b01110000,
    0b11110000,
    0b11110000,
    0b11110000,
    0b01111000,
    0b01111100,
    0b00111110,
    0b00011110,
    0b00001100,
};
#elif (mod_owo == 0)
const byte  owo_eyes[32] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b01110000,
    0b11111000,
    0b11111100,
    0b01111110,
    0b00111111,
    0b01111110,
    0b11111100,
    0b11111000,
    0b01110000,
    0b00000000,
    0b00000000,
    0b00000000,

    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00111000,
    0b01111100,
    0b01111110,
    0b00111111,
    0b01111110,
    0b01111100,
    0b00111000,
    0b00000000,
    0b00000000,
    0b00000000,
    0b00000000,
};
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Jaws sprites

#if (mod_jaws == 0)
 byte jaws[160] = {
    
    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00011100,
    0b01110000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00000011,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00011110,
    0b01111000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00000011,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00011110,
    0b01111100,
    0b11111000,
    0b01111000,
    0b00111100,
    0b00011110,
    0b00001111,
    0b00000111,
    0b00000011,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11100000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00011111,
    0b01111110,
    0b11111100,
    0b01111100,
    0b00111110,
    0b00011111,
    0b00001111,
    0b00000111,
    0b00000011,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00111000,
    0b00110000,
    0b01110000,
    0b01100000,
    0b11100000,
    0b11100000,
    0b11100000,
    0b11110000,
    0b01111000,
    0b00111100,
    0b00011110,
    0b00001111,
    0b00000111,
    0b00011111,
    0b01111111,
    0b11111110,
    0b01111110,
    0b00111111,
    0b00011111,
    0b00001111,
    0b00000111,
    0b00000011,
 };
#elif (mod_jaws == 1)
 byte jaws[160] = {
    
    0b00000001,
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00000100,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,

    0b00000001,
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00000100,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b10000000,
    0b10000000,
    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b00011000,
    0b00110000,
    0b01100000,
    0b11000000,

    0b00000001,
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00000100,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b00100000,
    0b01000000,
    0b01000000,
    0b01000000,
    0b10000000,
    0b11000000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,
    0b00011100,
    0b00111000,
    0b01110000,
    0b11100000,

    0b00000001,
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00000100,
    0b00001000,
    0b00001000,
    0b00001000,
    0b00010000,
    0b00010000,
    0b00010000,
    0b00110000,
    0b00110000,
    0b00100000,
    0b01100000,
    0b01100000,
    0b01000000,
    0b11000000,
    0b11000000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00011110,
    0b00111100,
    0b01111000,
    0b11111000,

    0b00000001,
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00000100,
    0b00001100,
    0b00001000,
    0b00001000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b01110000,
    0b01110000,
    0b01100000,
    0b11100000,
    0b11100000,
    0b11110000,
    0b01111000,
    0b00111100,
    0b00011110,
    0b00001111,
    0b00011111,
    0b00111110,
    0b01111110,
    0b11111110,
 };
#elif (mod_jaws == 2)

 byte jaws[160] = {
    
    0b00011100,
    0b00011110,
    0b00010011,
    0b00010110,
    0b00010110,
    0b00011100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,

    0b00011100,
    0b00011110,
    0b00010011,
    0b00010110,
    0b00010110,
    0b00011100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00001100,
    0b00001100,
    0b00011100,
    0b00011000,
    0b00111000,
    0b00111000,
    0b01110000,
    0b01110000,
    0b11100000,

    0b00011100,
    0b00011110,
    0b00010011,
    0b00010110,
    0b00010110,
    0b00011100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11100000,
    0b01100000,
    0b01110000,
    0b00110000,
    0b00111000,
    0b00011000,
    0b00011100,
    0b00001100,
    0b00001110,
    0b00011110,
    0b00011110,
    0b00111100,
    0b00111100,
    0b01111000,
    0b01111000,
    0b11110000,

    0b00011100,
    0b00011110,
    0b00010011,
    0b00010110,
    0b00010110,
    0b00011100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00111000,
    0b00110000,
    0b01110000,
    0b01100000,
    0b11100000,
    0b11100000,
    0b11100000,
    0b11110000,
    0b01110000,
    0b01111000,
    0b00111000,
    0b00111100,
    0b00011100,
    0b00011110,
    0b00001110,
    0b00001111,
    0b00011111,
    0b00011111,
    0b00111110,
    0b00111110,
    0b01111100,
    0b01111100,
    0b11111100,

    0b00011100,
    0b00011110,
    0b00010011,
    0b00010110,
    0b00010110,
    0b00011100,
    0b00011100,
    0b00011100,
    0b00011100,
    0b00111000,
    0b00111000,
    0b01110000,
    0b01110000,
    0b11110000,
    0b11100000,
    0b11110000,
    0b11110000,
    0b01111000,
    0b01111000,
    0b00111100,
    0b00111100,
    0b00011110,
    0b00011111,
    0b00001111,
    0b00001111,
    0b00011111,
    0b00011111,
    0b00111111,
    0b00111111,
    0b01111111,
    0b01111111,
    0b11111111,
 };

#elif (mod_jaws == 3)
  byte jaws[160] = {
    
    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00001100,
    0b00011000,
    0b00110000,
    0b01100000,
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00001100,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00001100,
    0b00011000,
    0b00110000,
    0b01110000,
    0b11110000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00011100,
    0b00001100,
    0b00011100,
    0b00111000,
    0b01111000,
    0b11111000,
    0b01111000,
    0b00111100,
    0b00011110,
    0b00001111,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b11100000,
    0b11100000,
    0b01100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00011110,
    0b00001110,
    0b00011110,
    0b00111110,
    0b01111100,
    0b11111100,
    0b01111110,
    0b00111110,
    0b00011111,
    0b00001111,

    0b00000111,
    0b00001001,
    0b00001011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00111000,
    0b00110000,
    0b01110000,
    0b01100000,
    0b11100000,
    0b11100000,
    0b11110000,
    0b11110000,
    0b01111000,
    0b01111000,
    0b00111100,
    0b00011110,
    0b00011111,
    0b00001111,
    0b00011111,
    0b00111111,
    0b01111111,
    0b11111111,
    0b01111111,
    0b00111111,
    0b00011111,
    0b00001111,
 };
#endif
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Dead eyes sprites

#if (mod_kill == 4)
const byte  dead_eyes[16] = {
    0b10000001,
    0b10000001,
    0b01000010,
    0b01000010,
    0b00100100,
    0b00100100,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00100100,
    0b00100100,
    0b01000010,
    0b01000010,
    0b10000001,
    0b10000001,
};
#elif (mod_kill == 3)
const byte  dead_eyes[16] = {
    0b00000001,
    0b00000010,
    0b00000100,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b10000000,
    0b01000000,
    0b00100000,
    0b00010000,
    0b00001000,
    0b00000100,
    0b00000010,
    0b00000001,
};
#elif (mod_kill == 2)
const byte  dead_eyes[16] = {
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
};
#elif (mod_kill == 1)
const byte  dead_eyes[16] = {
    0b00000000,
    0b00000000,
    0b00000000,
    0b10000001,
    0b11000011,
    0b01100110,
    0b00111100,
    0b00011000,
    0b00011000,
    0b00111100,
    0b01100110,
    0b11000011,
    0b10000001,
    0b00000000,
    0b00000000,
    0b00000000,
};
#elif (mod_kill == 0)
const byte  dead_eyes[16] = {
    0b00100000,
    0b00010000,
    0b00011000,
    0b00001100,
    0b00000110,
    0b00000110,
    0b00000010,
    0b00000011,
    0b00000011,
    0b00000111,
    0b00001110,
    0b00001110,
    0b00011100,
    0b00111000,
    0b11110000,
    0b11000000,
};
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Daed jaws sprites

#if (alt_kill == 3)
  byte k[64] = {
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    
    0b00011000,
    0b00011000,
    0b00011000,
    0b01111000,
    0b10011000,
    0b11011000,
    0b10011000,
    0b01111000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00110000,
    0b01100000,
    0b11000000,
  };
#elif (alt_kill == 2)
  byte k[64] = {
    0b11000000,
    0b01100000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00011000,
    0b00110000,
    0b01100000,
    0b11000000,
  };
#elif ((alt_kill == 1)||(alt_kill == 0))
  byte k[64] = {
    0b11000000,
    0b10100000,
    0b10100000,
    0b01100000,
    0b01100000,
    0b01110000,
    0b00110000,
    0b00110000,
    0b00111000,
    0b00011000,
    0b00011000,
    0b00011100,
    0b00001100,
    0b00001100,
    0b00001110,
    0b00000110,
    0b00000110,
    0b00000111,
    0b00000011,
    0b00000011,
    0b00000011,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00111100,
    0b01001100,
    0b10010110,
    0b11100110,
    0b10001111,
    0b01110011,
    0b00000011,
    0b00000111,
    0b00000110,
    0b00000110,
    0b00001110,
    0b00001100,
    0b00001100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00111000,
    0b00110000,
    0b00110000,
    0b01110000,
    0b01100000,
    0b01100000,
    0b10100000,
    0b10100000,
    0b11000000,
  };
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Astonishment jaws sprites

#if (alt_owo == 3)
  byte o[32] = {
    0b00110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111000,
    0b01110000,
    0b11100000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111000,
    0b01110000,
    0b11100000,
    0b11100000,
    0b01110000,
    0b00111000,
    0b00011100,
    0b00001110,
    0b00000111,
    0b00000111,
    0b00001110,
    0b00011100,
  };

#elif (alt_owo == 2)
  byte o[32] = {
    0b00000111,
    0b00001110,
    0b00011100,
    0b00111000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
  };
#elif ((alt_owo == 1)||(alt_owo == 0))
  byte  o[32] = {
    0b00000001,
    0b00000001,
    0b00000010,
    0b00000010,
    0b00000100,
    0b00000100,
    0b00001000,
    0b00001000,
    0b00010000,
    0b00010000,
    0b00100000,
    0b00100000,
    0b01000000,
    0b01000000,
    0b10000000,
    0b10000000,
    0b01000000,
    0b01000000,
    0b00100000,
    0b00100000,
    0b00010000,
    0b00010000,
    0b00001000,
    0b00001000,
    0b00000100,
    0b00001000,
    0b00010000,
    0b00100000,
    0b01000000,
    0b10000000,
    0b01000000,
    0b00100000,
 };
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sprite of anger: mouth.    

#if (alt_ang == 3)
  byte z[32] = {
    0b00011000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b00110000,
    0b00001100,
    0b00000011,
    0b00000011,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
    0b00110000,
  };
#elif (alt_ang == 2)
  byte z[32] = {
    0b11000000,
    0b10100000,
    0b10100000,
    0b01100000,
    0b01100000,
    0b01110000,
    0b00110000,
    0b00110000,
    0b00111000,
    0b00011000,
    0b00011000,
    0b00011100,
    0b00001100,
    0b00001100,
    0b00001110,
    0b00000110,
    0b00000110,
    0b00000111,
    0b00000011,
    0b00000011,
    0b00000011,
    0b00000110,
    0b00000110,
    0b00001100,
    0b00001100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
  };
#elif ((alt_ang == 1)||(alt_ang == 0))
  byte z[32] = {
    0b11000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00011100,
    0b00011100,
    0b00011100,
    0b00011000,
    0b00011000,
    0b00110000,
    0b00110000,
    0b01100000,
    0b01100000,
    0b11000000,
    0b11000000,
    0b10000000,
    0b11000000,
    0b01100000,
    0b01100000,
    0b00110000,
    0b00110000,
    0b00011000,
    0b00011000,
    0b00001100,
    0b00011000,
    0b00110000,
    0b01100000,
    0b11000000,
  };
#endif

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
void setup()
{
  pinMode(boop, INPUT); //Connecting the touch button
  matrix.setIntensity(brt); // Set the specified brightness
  matrix.setRotation(4); // Sprite Direction  1,2,3,4 // 4 - the most common, if it does not work, then install 3 and change "Max72xxPanel matrix = Max72xxPanel(9, 1, 14);" on "Max72xxPanel matrix = Max72xxPanel(9, 14, 1);"
  // Serial.begin(9600, SERIAL_8N1);  //disabled to save arduino resources 
}

void loop()
{
    _PWDC = 0;
    if (!(0)){
        //Serial.println(gtv1);         //disabled to save arduino resources 
        //Serial.println(analogRead (mic)); //disabled to save arduino resources 
    }
    if (((analogRead (mic)) - gtv1) > (maxsnach - (analogRead (mic)))){
        if (tim4I){
             if (_isTimer(tim4P, 50)){
                tim4O = 1;
            }
        }
        else{
            tim4I =1;
            tim4P = millis();
        }
    }
    else{
        tim4O = 0;
        tim4I = 0;
    }
    
    if (tim4O){
         if (! gen2I){
            gen2I = 1;
            gen2O = 1;
            gen2P = millis();
        }
    }
    else{
        gen2I = 0 ;
        gen2O= 0;
    }
    if (gen2I){
          if (_isTimer (gen2P , 10)){
             gen2P = millis();
            gen2O = ! gen2O;
        }
    }
    if (!(tim4O)){
         if (! gen3I){
            gen3I = 1;
            gen3O = 1;
            gen3P = millis();
        }
    }
    else{
        gen3I = 0 ;
        gen3O= 0;
    }
    if (gen3I){
          if (_isTimer (gen3P , 10)){
            gen3P = millis();
            gen3O = ! gen3O;
        }
    }
    if (gen2O){
        if (! count3I){
            count3I = 1;
            if(rot < 4){
                rot = rot + 1;
            }
        }
    }
     else{
        count3I = 0;
    }
    if (gen3O){
        if (! count3_SCST){
            count3_SCST = 1;
            if(rot > 0){
                rot = rot - 1;
            }
        }
    }
    else{
        count3_SCST = 0;
    }
    if((digitalRead (2))){
        tim7O = 1;
        tim7I = 1;
    }
    else{
         if(tim7I){
            tim7I = 0;
            tim7P = millis();
        }
        else{
             if (tim7O){
                if (_isTimer(tim7P, 3500)) tim7O = 0;
            }
        }
    }
    if (!(tim7O)){
         if (trgrt3I){
             trgrt3 = 0;
        }
        else{
            trgrt3 = 1;
            trgrt3I = 1;
        }
    }
    else{
        trgrt3 = 0;
        trgrt3I = 0;
    }
    
    if (trgrt3){
        count1_Value = 0;
    }
    else{
        if ((digitalRead (2))){
            if (! count1I){
                count1I = 1;
                count1_Value = count1_Value + 1;
            }
        }
         else{
            count1I = 0;
        }
    }
    count1MaxLO = count1_Value >= cnt_kl;
    if(count1MaxLO){
        kill = 1;
        tim1I = 1;
    }
    else{
         if(tim1I){
            tim1I = 0;
            tim1P = millis();
        }
        else{
             if (kill){
                if (_isTimer(tim1P, tm_dt)) kill = 0;
            }
        }
    }
    if (!(0)){
         if (trgrt8I){
             trgrt8 = 0;
        }
        else{
            trgrt8 = 1;
            trgrt8I = 1;
        }
    }
    else{
        trgrt8 = 0;
        trgrt8I = 0;
    }
    if (trgrt3){
        count4_Value = 0;
    }
    else{
        if ((digitalRead (2))){
            if (! count4I){
                count4I = 1;
                count4_Value = count4_Value + 1;
            }
        }
        else{
            count4I = 0;
        }
    }
    count4MaxLO = count4_Value >= cnt_zl;
    if(count4MaxLO){
        zloy = 1;
        tim5I = 1;
    }
    else{
         if(tim5I){
            tim5I = 0;
            tim5P = millis();
        }
        else{
             if (zloy){
                if (_isTimer(tim5P, zloy_tm)) zloy = 0;
            }
        }
    }
    if((((digitalRead (2))) && (!(zloy)))){
        smile = 1;
        tim3I = 1;
    }
    else{
         if(tim3I){
            tim3I = 0;
            tim3P = millis();
        }
        else{
             if (smile){
                if (_isTimer( tim3P, owo_tm)) smile = 0;
            }
        }
    }
    if (!(smile)){
         if (trgrt2I){
             trgrt2 = 0;
        }
        else{
            trgrt2 = 1;
            trgrt2I = 1;
        }
    }
    else{
        trgrt2 = 0;
        trgrt2I = 0;
    }
    
    if (!(((smile) || (zloy) || (kill)))){
        if (! gen7I){
            gen7I = 1;
            gen7O = 1;
            gen7P =  millis();
        }
    }
    else{
        gen7I = 0 ;
        gen7O= 0;
    }
    if (gen7I){
         if (gen7O){
             if (_isTimer(gen7P , 80)){
                gen7P = millis();
                gen7O = 0;
            }
        }
        else{
             if (_isTimer(gen7P , 6000)){
                gen7P = millis();
                gen7O = 1;
            }
        }
    }
    if (!(zloy)){
         if (trgrt1I){
             trgrt1 = 0;
        }
        else{
            trgrt1 = 1;
            trgrt1I = 1;
        }
    }
    else{
        trgrt1 = 0;
        trgrt1I = 0;
    }
    if (kill){
         if (trgrt4I){
             trgrt4 = 0;
        }
        else{
            trgrt4 = 1;
            trgrt4I = 1;
        }
    }
    else{
        trgrt4 = 0;
        trgrt4I = 0;
    }
    if(!(((smile) || (zloy) || (kill)))){
        blink=((trgrt8) || (gen7O) || (trgrt1) || (trgrt2) || (trgrt4));
    }
    else{
        blink=0;
    }
    if (1){
        if (! gen5I){
            gen5I = 1;
            nos = 1;
            gen5P =  millis();
        }
    }
    else{
        gen5I = 0 ;
        nos= 0;
    }
     if (gen5I){
         if (nos){
             if (_isTimer(gen5P , 2000)){
                 gen5P = millis();
                 nos = 0;
            }
        }
        else{
             if (_isTimer(gen5P , 1000)){
                 gen5P = millis();
                 nos = 1;
            }
        }
    }
    if (1){
         if (! gen1I){
            gen1I = 1;
            sprite_smile = 1;
            gen1P = millis();
        }
    }
    else{
        gen1I = 0 ;
        sprite_smile= 0;
    }
    if (gen1I){
          if (_isTimer (gen1P , hrt_spd)){
             gen1P = millis();
             sprite_smile = ! sprite_smile;
        }
    }

    if (1){
         if (! gen4I){
            gen4I = 1;
            gen4O = 1;
            gen4P = millis();
        }
    }
    else{
        gen4I = 0;
        gen4O= 0;
    }
    if (gen4I){
          if (_isTimer (gen4P , 0)){
            gen4P = millis();
            gen4O = ! gen4O;
        }
    }
    
    input =  (analogRead (mic));
    zamer = gen4O;
    if ((zamer) & (rot == 0)){
        if (! temp){
            temp =1;
            newData(input) ;
        }
    }
    else{
         temp = 0;
    }
    gtv1 = output;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Sprite Output 

  if (blink == HIGH)
  {
    for ( m1 = 0; m1 < 4; m1++){
    for (int y = 96; y < 112; y++){matrix.drawPixel(7-m1, y, LOW);}
    for (int y = 96; y < 112; y++){matrix.drawPixel(0+m1, y, LOW);}
    for (int y = 64; y < 80; y++) {matrix.drawPixel(7-m1, y, LOW);}
    for (int y = 64; y < 80; y++) {matrix.drawPixel(0+m1, y, LOW);}
    matrix.write(); 
    delay(t);
    }
    for ( m1 = 0; m1 < 4; m1++){
    for (int y = 0; y < 16;y++){
        matrix.drawPixel(3-m1, y+96, eyes[y] & (1 << 3-m1));
        matrix.drawPixel(3-m1, 79-y, eyes[y] & (1 << 3-m1));
        matrix.drawPixel(4+m1, y+96, eyes[y] & (1 << 4+m1));
        matrix.drawPixel(4+m1, 79-y, eyes[y] & (1 << 4+m1));
    }
    matrix.write(); 
    delay(t);    
    }
  }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

  if (nos == HIGH){
    for (int y = 0; y < 8; y++) {
      for (int x = 8; x >= 0; x--) {
        matrix.drawPixel(x, y+80, nose[y] & (1 << x));
        matrix.drawPixel(x, 95-y, nose[y] & (1 << x));
    }}matrix.write();
  }
  if (nos == LOW){
    for (int y = 8; y < 16; y++) {
      for (int x = 8; x >= 0; x--) {
        matrix.drawPixel(x, y+80, nose[y] & (1 << x));
        matrix.drawPixel(x, 95-y, nose[y] & (1 << x));
    }}matrix.write();
  }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

 if (smile  == HIGH & zloy  == LOW & kill  == LOW){
    if (mod_owo == 0){
    for (int y = 0+16*sprite_smile; y < 16+16*sprite_smile; y++) {
      for (int x = 8; x >= 0; x--) {
        matrix.drawPixel(x, y+96-16*sprite_smile, owo_eyes[y] & (1 << x));
        matrix.drawPixel(x, 79+16*sprite_smile-y, owo_eyes[y] & (1 << x));
    }
    }
    }
    else{
    for (int y = 0; y < 16; y++) {
      for (int x = 8; x >= 0; x--) {
        matrix.drawPixel(x, y+96, owo_eyes[y] & (1 << x));
        matrix.drawPixel(x, 79-y, owo_eyes[y] & (1 << x));
    }
    }
    }
    if (alt_owo != 0){
          for (int y = 0; y < 32; y++){
            for (int x = 8; x >= 0; x--){
              matrix.drawPixel(x, y, o[y] & (1 << x));
              matrix.drawPixel(x, 63-y, o[y] & (1 << x));
    }
    }
    matrix.write();
    }
        else{
      for (int y = 32*rot; y < 32+32*rot; y++){
        for (int x = 8; x >= 0; x--){
          matrix.drawPixel(x, y-32*rot, jaws[y] & (1 << x));
          matrix.drawPixel(x, 63+32*rot-y, jaws[y] & (1 << x));
      }
    }
    matrix.write();
    }
  }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  
  if (kill == 1){   
    if (alt_kill  != 0){
    for (int y = 0; y < 64; y++){
      for (int x = 8; x >= 0; x--){
         matrix.drawPixel(x, y, k[y] & (1 << x));
      }
    }
    }
    else{
      for (int y = 32*rot; y < 32+32*rot; y++){
        for (int x = 8; x >= 0; x--){
          matrix.drawPixel(x, y-32*rot, jaws[y] & (1 << x));
          matrix.drawPixel(x, 63+32*rot-y, jaws[y] & (1 << x));
      }
    }
    matrix.write();
    }
    for (int y = 0; y < 16; y++){
      for (int x = 8; x >= 0; x--){
          matrix.drawPixel(x, y+96, dead_eyes[y] & (1 << x));
          matrix.drawPixel(x, 79-y, dead_eyes[y] & (1 << x));
      }
    }    
  matrix.write();
  }
  
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

  if (zloy  == HIGH & kill == 0){
    if (alt_ang != 0){
      for (int y = 0; y < 32; y++){
        for (int x = 8; x >= 0; x--){
          matrix.drawPixel(x, y, z[y] & (1 << x));
          matrix.drawPixel(x, 63-y, z[y] & (1 << x));
      }
    }
    matrix.write();
    }
    else{
      for (int y = 32*rot; y < 32+32*rot; y++){
        for (int x = 8; x >= 0; x--){
          matrix.drawPixel(x, y-32*rot, jaws[y] & (1 << x));
          matrix.drawPixel(x, 63+32*rot-y, jaws[y] & (1 << x));
      }
    }
    matrix.write();
    }
    for (int y = 0; y < 16; y++){
      for (int x = 8; x >= 0; x--){
        matrix.drawPixel(x, y+96, ang_eyes[y] & (1 << x));
        matrix.drawPixel(x, 79-y, ang_eyes[y] & (1 << x));
      }
    }
    matrix.write(); 
  }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

  if (zloy == LOW & kill == LOW & smile == LOW){
    for (int y = 32*rot; y < 32+32*rot; y++){
      for (int x = 8; x >= 0; x--){
        matrix.drawPixel(x, y-32*rot, jaws[y] & (1 << x));
        matrix.drawPixel(x, 63+32*rot-y, jaws[y] & (1 << x));
      }
    }
    matrix.write();
  }

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  
}
bool _isTimer(unsigned long startTime, unsigned long period)
{
  unsigned long currentTime;
  currentTime = millis();
  if (currentTime >= startTime)
  {
    return (currentTime >= (startTime + period));
  }
  else
  {
    return (currentTime >= (4294967295 - startTime + period));
  }
}
ISR(TIMER2_OVF_vect)
{
  TCNT2 = 100;
  if (_PWDC >= 1000)
  {
    asm volatile ("jmp 0x0000");
  }
  else
  {
    _PWDC = _PWDC + 1;
  }
  ;
}

  void newData(int value)
{
    if (index < 100)    
    {
        array [ index ] = value;
        index++;
        return;
    }
    long res =0;
    for(int i=0; i < 100 ; i++) 
    {
        res = res + array[i];
        if(array[i] > maxsnach2)
        maxsnach2 = array[i];
    }
    index = 0;
    output = res / 100; //finding the average value from the microphone - disabled 
    maxsnach = maxsnach2;
    maxsnach2 = 0;
/* i do a little trolling
############################################################
############@+-.-:*+########################################
#################%@%%%@%@@%=++*:--*++::-:+##################
###################=++*==.......--+++++-....*###############
####################:...%:......*+......::....##############
#######################%-......-#*.:**::......=#############
##########################+...:@#########@-:---*@###########
##############=*%#%-:=#####:.-=#####@:--......=+=+##########
###################:.=#####+...=####=%@=+=#######*##########
############################-...=#####+**--######-##########
############################:....-####:...######%###########
###################################*-..-:######*-###########
##############################################*.############
#############################***@#+:-:#=-@#@##::############
##############################################-*############
#############################################=.*############
#########################=#%..-+#=:*#@*#@=###:.*############
###########################@:::@#**##%####%:...*############
####################################%=*---*:----############
#############################=++*::---:=@=---=:-=###########
###############################%%%+******+@%----%###########
###############################%:--------------@############
##################################@%=+****+=@###############
say hello to jting-f, kaiborg, moccactus and etc. */
}
